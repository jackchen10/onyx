# 多阶段构建 - 依赖安装阶段
FROM node:18-alpine AS dependencies

WORKDIR /app

# 复制package文件
COPY web/package.json web/yarn.lock* ./

# 安装依赖
RUN yarn install --frozen-lockfile --production=false

# 构建阶段
FROM node:18-alpine AS builder

WORKDIR /app

# 从依赖阶段复制node_modules
COPY --from=dependencies /app/node_modules ./node_modules

# 复制源代码
COPY web/ .

# 设置环境变量
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 构建应用
RUN yarn build

# 生产阶段 - 使用nginx提供静态文件
FROM nginx:alpine AS production

# 安装curl用于健康检查
RUN apk add --no-cache curl

# 复制构建产物
COPY --from=builder /app/out /usr/share/nginx/html

# 复制nginx配置
COPY docker/nginx/web.conf /etc/nginx/conf.d/default.conf

# 创建nginx用户目录
RUN mkdir -p /var/cache/nginx/client_temp \
    && mkdir -p /var/cache/nginx/proxy_temp \
    && mkdir -p /var/cache/nginx/fastcgi_temp \
    && mkdir -p /var/cache/nginx/uwsgi_temp \
    && mkdir -p /var/cache/nginx/scgi_temp

# 设置权限
RUN chown -R nginx:nginx /var/cache/nginx \
    && chown -R nginx:nginx /usr/share/nginx/html \
    && chmod -R 755 /usr/share/nginx/html

# 切换到nginx用户
USER nginx

# 暴露端口
EXPOSE 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]
