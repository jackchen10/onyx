# 多阶段构建 - 依赖安装阶段
FROM python:3.11-slim as dependencies

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 升级pip
RUN pip install --no-cache-dir --upgrade pip

# 复制requirements文件
COPY backend/requirements/ ./requirements/

# 安装Python依赖
RUN pip install --no-cache-dir -r requirements/default.txt

# 生产阶段
FROM python:3.11-slim as production

# 设置工作目录
WORKDIR /app

# 安装运行时依赖
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 从依赖阶段复制已安装的包
COPY --from=dependencies /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=dependencies /usr/local/bin /usr/local/bin

# 复制应用代码
COPY backend/ .

# 创建必要的目录
RUN mkdir -p /app/logs /app/uploads /app/temp

# 创建非root用户
RUN groupadd -r app && useradd -r -g app app

# 设置文件权限
RUN chown -R app:app /app

# 切换到非root用户
USER app

# 设置环境变量
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# 启动命令
CMD ["uvicorn", "onyx.main:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "1"]
